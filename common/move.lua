---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by glastis.
--- DateTime: 20-Nov-22 17:57
---

local sides = require 'sides'

local move = {}

local _coordinates = {}
_coordinates.x = 0
_coordinates.y = 0
_coordinates.z = 0
_coordinates.facing = 0

-- TODO: Implement the coords update in the move functions

-------------------------------------------------------------------[[
---------------------------------------------------------------------
----                    PRIVATE FUNCTIONS                        ----
---------------------------------------------------------------------
-------------------------------------------------------------------]]

local function _move_direction(f_dig, f_move, amount, force, direction)
    local i
    local total_moved

    i = 1
    total_moved = 0
    if not amount then
        amount = 1
    end
    if direction then
        _rotate(direction)
    end
    while i <= amount do
        if f_move() then
            _coordinates.y = _coordinates.y + 1
            total_moved = total_moved + 1
        elseif force then
            f_dig()
        else
            return total_moved
        end
        i = i + 1
    end
    return total_moved
end

-------------------------------------------------------------------[[
---------------------------------------------------------------------
----                    PUBLIC FUNCTIONS                         ----
---------------------------------------------------------------------
-------------------------------------------------------------------]]

--[[
---- Get the current coordinates of the turtle
----
---- @return table {x, y, z, facing}
--]]
local function getCoords()
    return _coordinates
end
move.getCoords = getCoords

--[[
---- Set coords to the given values. If a value is nil, it will not be changed.
----
---- @param x
---- @param y
---- @param z
---- @param facing
--]]
local function setCoords(x, y, z, facing)
    if x then
        _coordinates.x = x
    end
    if y then
        _coordinates.y = y
    end
    if z then
        _coordinates.z = z
    end
    if facing then
        _coordinates.facing = facing
    end
end
move.setCoords = setCoords

local function rotate(direction)
    local i

    if (_coordinates.facing + 3) % 4 == direction then
        turtle.turnLeft()
    end
    while _coordinates.facing ~= direction do
        turtle.turnRight()
        _coordinates.facing = _coordinates.facing + 1
        if _coordinates.facing > 3 then
            _coordinates.facing = 0
        end
    end
    _coordinates.facing = direction
end
move.rotate = rotate

--[[
---- Move the turtle upwards
----
---- @param amount  The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force   If true, the turtle will break blocks in its way. False by default.
---- @return number The amount of blocks moved.
--]]
local function up(amount, force)
    return _move_direction(turtle.digUp, turtle.up, amount, force)
end
move.up = up

--[[
---- Move the turtle downwards
----
---- @param amount  The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force   If true, the turtle will break blocks in its way. False by default.
---- @return number The amount of blocks moved.
--]]
local function down(amount, force)
    return _move_direction(turtle.digDown, turtle.down, amount, force)
end
move.down = down

--[[
---- Move the turtle forward
----
---- @param amount  The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force   If true, the turtle will break blocks in its way. False by default.
---- @return number The amount of blocks moved.
--]]
local function forward(amount, force)
    return _move_direction(turtle.dig, turtle.forward, amount, force)
end
move.forward = forward

return move