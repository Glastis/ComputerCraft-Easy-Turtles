---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by glastis.
--- DateTime: 20-Nov-22 17:57
---

local sides = require 'sides'

local move = {}

local _coordinates = {}
_coordinates.x = 0
_coordinates.y = 0
_coordinates.z = 0
_coordinates.facing = 0


-------------------------------------------------------------------[[
---------------------------------------------------------------------
----                    PRIVATE FUNCTIONS                        ----
---------------------------------------------------------------------
-------------------------------------------------------------------]]

local function _move_direction_update_coords(amount, direction)
    if direction == sides.back then
        _coordinates.x = _coordinates.x - amount
    elseif direction == sides.front then
        _coordinates.x = _coordinates.x + amount
    elseif direction == sides.left then
        _coordinates.z = _coordinates.z - amount
    elseif direction == sides.right then
        _coordinates.z = _coordinates.z + amount
    elseif direction == sides.up then
        _coordinates.y = _coordinates.y + amount
    elseif direction == sides.down then
        _coordinates.y = _coordinates.y - amount
    end
end

local function _move_direction(f_dig, f_move, amount, force, direction, callback)
    local i
    local total_moved

    i = 1
    total_moved = 0
    if not amount then
        amount = 1
    end
    if direction then
        _rotate(direction)
    end
    while i <= amount do
        if f_move() then
            _move_direction_update_coords(1, direction)
            if callback then
                callback()
            end
            total_moved = total_moved + 1
        elseif force then
            f_dig()
        else
            return total_moved
        end
        i = i + 1
    end
    return total_moved
end

local function _move_to_axis_coord(f_move_axis, f_move_axis_neg, axis_value_actual, axis_value_target, force)
    if axis_value_actual > axis_value_target then
        return f_move_axis_neg(axis_value_actual - axis_value_target, force)
    elseif axis_value_actual < axis_value_target then
        return f_move_axis(axis_value_target - axis_value_actual, force)
    end
    return 0
end

-------------------------------------------------------------------[[
---------------------------------------------------------------------
----                    PUBLIC FUNCTIONS                         ----
---------------------------------------------------------------------
-------------------------------------------------------------------]]

--[[
---- Get the current coordinates of the turtle
----
---- @return table {x, y, z, facing}
--]]
local function getCoords()
    return _coordinates
end
move.getCoords = getCoords

--[[
---- Set coords to the given values. If a value is nil, it will not be changed.
----
---- @param x
---- @param y
---- @param z
---- @param facing
--]]
local function setCoords(x, y, z, facing)
    if x then
        _coordinates.x = x
    end
    if y then
        _coordinates.y = y
    end
    if z then
        _coordinates.z = z
    end
    if facing then
        _coordinates.facing = facing
    end
end
move.setCoords = setCoords

--[[
---- Rotate the turtle to the given side. If the side is up or down, this function will do nothing.
----
---- @param direction  side, The direction to rotate to
--]]
local function rotate(side)
    local i

    if side > 3 then
        return
    end
    if (_coordinates.facing + 3) % 4 == side then
        turtle.turnLeft()
    end
    while _coordinates.facing ~= side do
        turtle.turnRight()
        _coordinates.facing = _coordinates.facing + 1
        if _coordinates.facing > 3 then
            _coordinates.facing = 0
        end
    end
    _coordinates.facing = side
end
move.rotate = rotate

--[[
---- Move the turtle upwards
----
---- @param amount      The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force       If true, the turtle will break blocks in its way. False by default.
---- @param callback    A function to call after each successful move.
---- @return number     The amount of blocks moved.
--]]
local function up(amount, force, callback)
    return _move_direction(turtle.digUp, turtle.up, amount, force, sides.up, callback)
end
move.up = up

--[[
---- Move the turtle downwards
----
---- @param amount      The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force       If true, the turtle will break blocks in its way. False by default.
---- @param callback    A function to call after each successful move.
---- @return number     The amount of blocks moved.
--]]
local function down(amount, force, callback)
    return _move_direction(turtle.digDown, turtle.down, amount, force, sides.down, callback)
end
move.down = down

--[[
---- Move the turtle forward
----
---- @param amount      The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force       If true, the turtle will break blocks in its way. False by default.
---- @param callback    A function to call after each successful move.
---- @return number     The amount of blocks moved.
--]]
local function forward(amount, force, callback)
    return _move_direction(turtle.dig, turtle.forward, amount, force, sides.front, callback)
end
move.forward = forward

--[[
---- Move the turtle backward
----
---- @param amount      The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force       If true, the turtle will break blocks in its way. False by default.
---- @param callback    A function to call after each successful move.
---- @return number     The amount of blocks moved.
--]]
local function backward(amount, force, callback)
    return _move_direction(turtle.dig, turtle.back, amount, force, sides.back, callback)
end
move.backward = backward

--[[
---- Move the turtle to the left, according to its initial facing direction
----
---- @param amount      The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force       If true, the turtle will break blocks in its way. False by default.
---- @param callback    A function to call after each successful move.
---- @return number     The amount of blocks moved.
--]]
local function left(amount, force)
    return _move_direction(turtle.dig, turtle.back, amount, force, sides.left, callback)
end

--[[
---- Move the turtle to the right, according to its initial facing direction
----
---- @param amount      The amount of blocks to move, if nil, turtle will only move 1 block.
---- @param force       If true, the turtle will break blocks in its way. False by default.
---- @param callback    A function to call after each successful move.
---- @return number     The amount of blocks moved.
--]]
local function right(amount, force)
    return _move_direction(turtle.dig, turtle.forward, amount, force, sides.right, callback)
end

move.move_to = move_to

--[[
---- Move the turtle to the given coordinates, and execute the callback function at each step
----
---- @param x           The x coordinate to move to
---- @param y           The y coordinate to move to
---- @param z           The z coordinate to move to
---- @param force       If true, the turtle will break blocks in its way. False by default.
---- @param callback    The function to execute at each step
---- @return boolean    True if the turtle reached the given coordinates, false otherwise.
--]]
local function move_to_and_execute(x, y, z, force, callback)
    local total_moved

    total_moved = _move_to_axis_coord(up, down, _coordinates.y, y, force, callback)
    total_moved = total_moved + _move_to_axis_coord(forward, backward, _coordinates.z, z, force, callback)
    total_moved = total_moved + _move_to_axis_coord(right, left, _coordinates.x, x, force, callback)
    return total_moved == math.abs(_coordinates.y - y) + math.abs(_coordinates.z - z) + math.abs(_coordinates.x - x)

end

--[[
---- Move the turtle to the given coordinates
----
---- @param x    The x coordinate to move to
---- @param y    The y coordinate to move to
---- @param z    The z coordinate to move to
---- @param force   If true, the turtle will break blocks in its way. False by default.
---- @return boolean True if the turtle reached the given coordinates, false otherwise.
--]]
local function move_to(x, y, z, force)
    return move_to_and_execute(x, y, z, force, nil)
end

return move
